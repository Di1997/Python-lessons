# region Task 1
# 1. Создать список и заполнить его элементами различных типов данных. Реализовать скрипт проверки типа данных
# каждого элемента. Использовать функцию type() для проверки типа. Элементы списка можно не запрашивать у
# пользователя, а указать явно, в программе.

data = ["String", 123, [1, 2, 3], (1, 2, 3), {"a": 1, "b": 2}, 0.5]

for i in data:
    var_type = type(i)
    if var_type == str:
        print(f"\"{i}\" is string")
    elif var_type == int:
        print(f"{i} is integer")
    elif var_type == list:
        print(f"{i} is list")
    elif var_type == tuple:
        print(f"{i} is tuple")
    elif var_type == dict:
        print(f"{i} is dictionary")
    elif var_type == float:
        print(f"{i} is float")

# endregion

# region Task 2
# 2. Для списка реализовать обмен значений соседних элементов, т.е. Значениями обмениваются элементы с индексами 0 и
# 1, 2 и 3 и т.д. При нечетном количестве элементов последний сохранить на своем месте. Для заполнения списка
# элементов необходимо использовать функцию input().

print("Type Q to stop")
data = []

while True:
    user_input = input(f"Insert value into list. Current amount: {len(data)}\n")
    if user_input.lower() == "q":
        break

    data.append(user_input)

if len(data) > 0:
    new_data = []
    is_odd = len(data) % 2 == 1

    for idx, i in enumerate(data):
        if not (is_odd and idx == (len(data) - 1)):
            if idx % 2 == 1:
                new_data.insert(idx - 1, i)
            else:
                new_data.insert(idx + 1, i)
        else:
            new_data.insert(idx, i)

    print(new_data)

else:
    print("Nothing was entered!")

# endregion

# region Task 3
# 3. Пользователь вводит месяц в виде целого числа от 1 до 12. Сообщить к какому времени года относится месяц (зима,
# весна, лето, осень). Напишите решения через list и через dict.

months = {"Winter": [12, 1, 2], "Spring": [3, 4, 5], "Summer": [6, 7, 8], "Autumn": [9, 10, 11]}

user_input = input("Enter month (1 - 12): ")

if user_input.isnumeric() and 1 <= int(user_input) <= 12:
    month = int(user_input)
    for season in months.items():
        if month in season[1]:
            print(f"The season for month {user_input} is {season[0]}")

else:
    print("Invalid month!")

# endregion

# region Task 4
# 4. Пользователь вводит строку из нескольких слов, разделённых пробелами. Вывести каждое слово с новой строки.
# Строки необходимо пронумеровать. Если в слово длинное, выводить только первые 10 букв в слове.

user_input = input("Write anything: ")

if len(user_input) > 0:
    strings = user_input.split(" ")

    for idx, string in enumerate(strings):
        print(f"{idx}: {string[0:10]}")
else:
    "Invalid string!"

# endregion

# region Task 5
# 5. Реализовать структуру «Рейтинг», представляющую собой не возрастающий набор натуральных чисел. У пользователя
# необходимо запрашивать новый элемент рейтинга. Если в рейтинге существуют элементы с одинаковыми значениями,
# то новый элемент с тем же значением должен разместиться после них. Подсказка. Например, набор натуральных чисел: 7,
# 5, 3, 3, 2. Пользователь ввел число 3. Результат: 7, 5, 3, 3, 3, 2. Пользователь ввел число 8. Результат: 8, 7, 5,
# 3, 3, 2. Пользователь ввел число 1. Результат: 7, 5, 3, 3, 2, 1. Набор натуральных чисел можно задать
# непосредственно в коде, например, my_list = [7, 5, 3, 3, 2].

inputs = []

print("Endless cycle. Write q to stop")

while True:
    num = input("Enter number: ")

    if num.isnumeric():
        inputs.append(int(num))
        inputs.sort(reverse=True)
        print(inputs)
    elif num.lower() == "q":
        break
    else:
        print("Invalid number. Please, try again")

# endregion

# region Task 6
# 6. *Реализовать структуру данных «Товары». Она должна представлять собой список кортежей. Каждый кортеж хранит
# информацию об отдельном товаре. В кортеже должно быть два элемента — номер товара и словарь с параметрами (
# характеристиками товара: название, цена, количество, единица измерения). Структуру нужно сформировать программно,
# т.е. запрашивать все данные у пользователя. Пример готовой структуры:
# [
# (1, {“название”: “компьютер”, “цена”: 20000, “количество”: 5, “eд”: “шт.”}),
# (2, {“название”: “принтер”, “цена”: 6000, “количество”: 2, “eд”: “шт.”}),
# (3, {“название”: “сканер”, “цена”: 2000, “количество”: 7, “eд”: “шт.”})
# ]
# Необходимо собрать
# аналитику о товарах. Реализовать словарь, в котором каждый ключ — характеристика товара, например название,
# а значение — список значений-характеристик, например список названий товаров. Пример:
# {
# “название”: [“компьютер”, “принтер”, “сканер”],
# “цена”: [20000, 6000, 2000],
# “количество”: [5, 2, 7],
# “ед”: [“шт.”]
# }

tuples = []

print("Beginning endless loop. Type Q to finish")

while True:
    stop = False

    while True:
        index = input("Type product number: ")
        if not index.isnumeric() and not index == "q":
            print("Invalid number!")
        elif index.lower() == "q":
            stop = True
            break
        else:
            break

    if stop:
        break

    name = input("Type name for product: ")

    if name.lower() == "q":
        break

    while True:
        price = input("Type product price (number): ")
        if not price.isnumeric() and not price == "q":
            print("Invalid number!")
        elif price.lower() == "q":
            stop = True
            break
        else:
            break

    if stop:
        break

    while True:
        amount = input("Type amount of the products (number): ")
        if not amount.isnumeric() and not amount == "q":
            print("Invalid number!")
        elif amount.lower() == "q":
            stop = True
            break
        else:
            break

    if stop:
        break

    unit = input("Enter product unit: ")

    if unit.lower() == "q":
        break

    tuples.append((index, {"name": name, "price": price, "amount": amount, "unit": unit}))

print(tuples)

data = {"name": [], "price": [], "amount": [], "unit": []}

for product in tuples:
    data["name"].append(product[1]["name"])
    data["price"].append(product[1]["price"])
    data["amount"].append(product[1]["amount"])
    data["unit"].append(product[1]["unit"])

print(data, sep="\n")

# endregion
